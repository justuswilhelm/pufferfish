#!/usr/bin/env python3
"""Sync all git annex repositories in your home directory"""

import argparse
import subprocess
from pathlib import Path


def main(remote: str, non_interactive: bool):
    if remote:
        print(f"Syncing with remote '{remote}'")
    else:
        print("Syncing with all remotes")

    cmd = [
        "fd",
        "-0",
        "--exclude",
        str(Path.home() / ".cache"),
        "--exclude",
        str(Path.home() / "Library"),
        "--prune",
        "--hidden",
        "--full-path",
        str(Path.home() / ".*/.git/annex$"),
        str(Path.home()),
    ]
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
    paths = result.stdout.strip().split("\0")

    if not paths:
        print("No git-annex repositories found")
        return

    print(f"Found {len(paths)} git-annex repositories")

    for annex_sub_dir in paths:
        annex = str(Path(annex_sub_dir).parent.parent)
        if remote:
            result = subprocess.run(
                ["git", "-C", annex, "remote", "get-url", remote],
            )
            if result.returncode != 0:
                print(f"git-annex at '{annex}' has no remote named '{remote}'")
                continue

        print(f"Sync git-annex at '{annex}'")

        cmd = ["git", "annex", "sync", "--content", "--no-commit"]
        if remote:
            cmd = [*cmd, remote]

        print(f"Running the following command inside {annex}:")
        print(" ".join(cmd))

        result = subprocess.run(cmd, cwd=annex, check=True)
        if result.returncode != 0:
            print(f"Sync git-annex for '{annex}' not ok")
            if non_interactive:
                print("Non-interactive mode: continuing automatically")
                continue
            try:
                input("Continue? C-c to quit> ")
            except KeyboardInterrupt:
                return

        print(f"Sync git-annex for '{annex}' ok")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Sync all git annex repositories in your home directory"
    )
    parser.add_argument("remote", nargs="?", help="Remote to sync with (optional)")
    parser.add_argument("--non-interactive", action="store_true",
                       help="Skip prompts and continue automatically)")
    args = parser.parse_args()
    main(args.remote, args.non_interactive)
